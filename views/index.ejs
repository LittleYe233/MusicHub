<!DOCTYPE html>
<html>
  <head>
    <title>Home | MusicHub hosted by <%- server.owner %></title>
    <link rel="stylesheet" href="/public/css/tailwind.css" />
  </head>

  <body>
    <style>
      * {
        --musichub-heading-height: 47px;
        --musichub-aplayer-height: 66px;
      }

      /*
        This is a hook of APlayer, which results from the upstream.
        See issue https://github.com/DIYgod/APlayer/issues/741.
      */
      .aplayer.aplayer-fixed .aplayer-body {
        max-width: initial;
        width: calc(100% - 18px);
      }

      .aplayer.aplayer-fixed .aplayer-info .aplayer-music {
        max-width: initial;
        width: calc(100% - 105px);
      }

      svg.order > polygon {
        fill: grey;
      }

      svg.order.ascending > polygon.upper {
        fill: black;
      }

      svg.order.descending > polygon.lower {
        fill: black;
      }
    </style>

    <div class="relative flex min-h-screen flex-col overflow-hidden font-serif">
      <h1 class="py-3 text-center text-4xl font-bold">MusicHub Homepage</h1>
      <div class="relative flex justify-center">
        <div id="lobby" class="max-w-4/5 w-4/5">
          <h2 class="mb-3 text-3xl font-bold">Playlist</h2>
          <div class="my-3">
            <span class="space-x-1">
              <button class="rounded-lg border-2 border-gray-100 px-2 py-1 shadow-md" onclick="selectAll(elemTbodyPlaylist)">
                Select All
              </button>
              <button class="rounded-lg border-2 border-gray-100 px-2 py-1 shadow-md" onclick="selectNone(elemTbodyPlaylist)">
                Select None
              </button>
              <button class="rounded-lg border-2 border-gray-100 px-2 py-1 shadow-md" onclick="invertSelection(elemTbodyPlaylist)">
                Invert Selection
              </button>
              <button class="rounded-lg border-2 border-gray-100 px-2 py-1 shadow-md" onclick="removeSelectedSongs(ap, elemTbodyPlaylist)">
                Remove Selected
              </button>
            </span>
          </div>
          <div>
            <table id="tblPlaylist" class="table-fixed w-full leading-8">
              <thead class="font-bold">
                <td class="max-w-[1em] min-w-[1em] w-4"></td>
                <td class="max-w-[5em] min-w-[4.75em] w-20 text-center">
                  <span>Num#</span>
                </td>
                <td class="text-center">
                  <span>Name</span>
                </td>
                <td class="max-w-[20%] min-w-[20%] w-1/5 text-center">
                  <span>Artists</span>
                </td>
                <td class="max-w-[20%] min-w-[20%] w-1/5 text-center">
                  <span>Album</span>
                </td>
                <td class="max-w-[10%] min-w-[10%] w-[10%] text-center">Operations</td>
              </thead>
              <tbody id="tbodyPlaylist"></tbody>
            </table>
          </div>
        </div>
      </div>
      <div id="aplayer"></div>
    </div>

    <template id="svgOrderUnordered">
      <span>
        <svg viewBox="0 0 24 24" class="order unordered inline h-3.5">
          <polygon points="12,0 0,11 24,11" class="upper"></polygon>
          <polygon points="12,24 0,13 24,13" class="lower"></polygon></svg
      ></span>
    </template>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/aplayer-remake/dist/APlayer.min.js"></script>
    <script>
      var songsConfig = null;
      var elemTblPlaylist = document.getElementById('tblPlaylist');
      var elemTbodyPlaylist = document.getElementById('tbodyPlaylist');
      var elemSvgOrderUnordered = document.getElementById('svgOrderUnordered');
      var ap = null;

      function selectAll(context) {
        for (tr of context.children) {
          tr.children[0].children[0].checked = true;
        }
      }

      function selectNone(context) {
        for (tr of context.children) {
          tr.children[0].children[0].checked = false;
        }
      }

      function invertSelection(context) {
        for (tr of context.children) {
          tr.children[0].children[0].checked = !tr.children[0].children[0].checked;
        }
      }

      /**
       * Play a song by index.
       * @param {object} ap the APlayer object
       * @param {number|null} index the given index
       */
      function playSong(ap, index, context) {
        context = context || this;
        if (index === null) {
          index = parseInt(context.dataset.index);
        }
        ap.pause();
        ap.list.switch(index);
        ap.play();
      }

      /**
       * Remove a song by index.
       * @param {object} ap the APlayer object
       * @param {number[]|number|null} index the given index or array of them
       * @param {Element} context the given context
       */
      function removeSongs(ap, index, context) {
        // parse arguments
        context = context || this;
        if (index === null) {
          index = [context.dataset.index];
        } else if (!Array.isArray(index)) {
          index = [index];
        }

        index = index.map((v) => parseInt(v));
        index.sort((a, b) => b - a); // descending sort
        // MusicHub list
        index.forEach((v) => elemTbodyPlaylist.removeChild(elemTbodyPlaylist.children[v]));
        for (let i = index[index.length - 1]; i < elemTbodyPlaylist.children.length; ++i) {
          elemTbodyPlaylist.children[i].dataset.index = i;
          elemTbodyPlaylist.children[i].children[1].innerText = i + 1;
        }

        // APlayer list
        ap.list.remove(index);
      }

      function removeSelectedSongs(ap, context) {
        context = context || this;
        let index = [];
        Array.from(context.children).forEach((v, i) => {
          if (v.children[0].children[0].checked) {
            index.push(i);
          }
        });
        return removeSongs(ap, index, context);
      }

      (async () => {
        // add "order" SVGs to essential columns
        Array.from(document.querySelectorAll('#tblPlaylist>thead td'))
          .slice(1, 5)
          .forEach((v) => v.append(elemSvgOrderUnordered.content.cloneNode(true)));

        try {
          songsConfig = await $.ajax({
            url: '/rest/get-config/songs',
            dataType: 'json'
          });
        } catch (e) {
          console.error('Failed to get config of songs:', e);
        }

        elemTbodyPlaylist.innerHTML = songsConfig
          .map(
            (v, idx) =>
              `<tr data-index="${idx}">` +
              `<td class="text-center"><input type="checkbox" /></td>` +
              `<td class="text-center">${idx + 1}</td>` +
              `<td>${v.name}</td>` +
              `<td>${v.artist}</td>` +
              `<td>${v.album}</td>` +
              `<td><button onclick="playSong(ap, null, this.parentNode.parentNode)">Play</button><button onclick="removeSongs(ap, null, this.parentNode.parentNode)">Remove</button></td>` +
              `</tr>`
          )
          .join('');
        ap = new APlayer({
          container: document.getElementById('aplayer'),
          fixed: true,
          autoplay: false,
          theme: '#FADFA3',
          preload: 'auto',
          volume: 0.7,
          mutex: true,
          audio: songsConfig
        });
        ap.setMode('normal'); // default: expand player panel
        ap.list.hide(); // Force to hide player list to make sure it can be expanded for the first time.
      })();
    </script>
  </body>
</html>
